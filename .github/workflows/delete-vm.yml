name: Delete Regional Test VM

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        type: string
        description: 'Deployment ID from VM creation'
        required: true
      confirm_deletion:
        type: boolean
        description: 'CONFIRM VM DELETION (cannot be undone!)'
        required: true
        default: false
      force_deletion:
        type: boolean
        description: 'Force deletion if metadata not found'
        required: false
        default: false

jobs:
  delete-vm:
    runs-on: ubuntu-latest
    environment: main
    
    permissions:
      contents: read
      id-token: write
      actions: read
    
    env:
      PROJECT_ID: "vsa-ai-prod"
      DEPLOYMENT_ID: ${{ github.event.inputs.deployment_id }}
    
    steps:
      - name: Validate Deletion
        run: |
          if [[ "${{ github.event.inputs.confirm_deletion }}" != "true" ]]; then
            echo "Deletion not confirmed"
            exit 1
          fi
      
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_VSA_PROD }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Download VM Metadata
        id: download-metadata
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: vm-metadata-${{ env.DEPLOYMENT_ID }}
          path: ./metadata
      
      - name: Extract VM Info
        id: vm-info
        run: |
          if [[ -f ./metadata/vm-metadata.json ]]; then
            VM_NAME=$(jq -r '.vm.name' ./metadata/vm-metadata.json)
            VM_ZONE=$(jq -r '.deployment.zone' ./metadata/vm-metadata.json)
            FIREWALL_RULE=$(jq -r '.vm.firewall_rule' ./metadata/vm-metadata.json)
            echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
            echo "vm_zone=$VM_ZONE" >> $GITHUB_OUTPUT
            echo "firewall_rule=$FIREWALL_RULE" >> $GITHUB_OUTPUT
            echo "found=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.force_deletion }}" == "true" ]]; then
            VM_INFO=$(gcloud compute instances list --filter="labels.deployment-id=${{ env.DEPLOYMENT_ID }}" --format="csv(name,zone)" --limit=1 | tail -n +2)
            if [[ -n "$VM_INFO" ]]; then
              VM_NAME=$(echo "$VM_INFO" | cut -d, -f1)
              VM_ZONE=$(basename "$(echo "$VM_INFO" | cut -d, -f2)")
              echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
              echo "vm_zone=$VM_ZONE" >> $GITHUB_OUTPUT
              echo "firewall_rule=allow-test-services-${{ env.DEPLOYMENT_ID }}" >> $GITHUB_OUTPUT
              echo "found=true" >> $GITHUB_OUTPUT
            else
              echo "found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Metadata not found and force deletion not enabled"
            exit 1
          fi
      
      - name: Stop Services
        if: steps.vm-info.outputs.found == 'true'
        continue-on-error: true
        run: |
          gcloud compute ssh "debian@${{ steps.vm-info.outputs.vm_name }}" --zone="${{ steps.vm-info.outputs.vm_zone }}" \
            --command="
              cd /opt/test-services || exit 0
              if [ -f docker-compose.yml ]; then
                sudo docker-compose down --timeout 30 2>/dev/null || true
                sudo docker system prune -f || true
              fi
            " --ssh-flag="-o ConnectTimeout=10" || true
      
      - name: Delete VM
        if: steps.vm-info.outputs.found == 'true'
        run: |
          gcloud compute instances delete "${{ steps.vm-info.outputs.vm_name }}" \
            --zone="${{ steps.vm-info.outputs.vm_zone }}" \
            --quiet
      
      - name: Delete Firewall Rule
        continue-on-error: true
        run: |
          FIREWALL_RULE="${{ steps.vm-info.outputs.firewall_rule }}"
          if [[ -n "$FIREWALL_RULE" && "$FIREWALL_RULE" != "null" ]]; then
            gcloud compute firewall-rules delete "$FIREWALL_RULE" --quiet || true
          else
            gcloud compute firewall-rules delete "allow-test-services-${{ env.DEPLOYMENT_ID }}" --quiet || true
          fi
      
      - name: Clean Up Disks
        continue-on-error: true
        run: |
          DISKS=$(gcloud compute disks list --filter="labels.deployment-id=${{ env.DEPLOYMENT_ID }}" --format="value(name,zone)" || echo "")
          if [[ -n "$DISKS" ]]; then
            echo "$DISKS" | while IFS=' ' read -r disk_name zone_path; do
              if [[ -n "$disk_name" && -n "$zone_path" ]]; then
                zone=$(basename "$zone_path")
                gcloud compute disks delete "$disk_name" --zone="$zone" --quiet || true
              fi
            done
          fi
      
      - name: Generate Deletion Report
        run: |
          cat > deletion-report.json << EOF
          {
            "deletion_completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "vm_name": "${{ steps.vm-info.outputs.vm_name }}",
            "deleted_by": "${{ github.actor }}",
            "status": "completed"
          }
          EOF
      
      - name: Upload Deletion Report
        uses: actions/upload-artifact@v4
        with:
          name: deletion-report-${{ env.DEPLOYMENT_ID }}
          path: deletion-report.json
          retention-days: 90
      
      - name: Display Summary
        run: |
          echo "VM Deletion Completed"
          echo "VM: ${{ steps.vm-info.outputs.vm_name }}"
          echo "Deployment ID: ${{ env.DEPLOYMENT_ID }}"
          echo "Deleted by: ${{ github.actor }}"