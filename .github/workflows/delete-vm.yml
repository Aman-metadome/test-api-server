name: Delete Regional Test VM

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        type: string
        description: 'Deployment ID (GitHub Run ID from VM creation workflow)'
        required: true
      confirm_deletion:
        type: boolean
        description: '‚ö†Ô∏è CONFIRM VM DELETION (This action cannot be undone!)'
        required: true
        default: false
      force_deletion:
        type: boolean
        description: 'Force deletion even if VM is not found'
        required: false
        default: false

jobs:
  delete-vm:
    runs-on: ubuntu-latest
    environment: main
    
    permissions:
      contents: read
      id-token: write
      actions: read
    
    env:
      PROJECT_ID: "vsa-ai-prod"
      DEPLOYMENT_ID: ${{ github.event.inputs.deployment_id }}
    
    steps:
      - name: Validate Deletion Confirmation
        run: |
          if [[ "${{ github.event.inputs.confirm_deletion }}" != "true" ]]; then
            echo "‚ùå DELETION NOT CONFIRMED"
            echo "   Please check the confirmation box to proceed with VM deletion."
            echo "   This is a safety measure to prevent accidental deletions."
            exit 1
          fi
          
          echo "‚úÖ Deletion confirmed for deployment ID: ${{ env.DEPLOYMENT_ID }}"
      
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_VSA_PROD }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Download VM Metadata
        id: download-metadata
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: vm-metadata-${{ env.DEPLOYMENT_ID }}
          path: ./metadata
      
      - name: Extract VM Information
        id: vm-info
        run: |
          METADATA_FOUND="false"
          VM_NAME=""
          VM_ZONE=""
          VM_REGION=""
          VM_IP=""
          FIREWALL_RULE=""
          CREATED_AT=""
          
          if [[ -f ./metadata/vm-metadata.json ]]; then
            echo "üìã VM metadata found, extracting information..."
            
            VM_NAME=$(jq -r '.vm.name' ./metadata/vm-metadata.json)
            VM_ZONE=$(jq -r '.deployment.zone' ./metadata/vm-metadata.json)
            VM_REGION=$(jq -r '.deployment.region' ./metadata/vm-metadata.json)
            VM_IP=$(jq -r '.vm.external_ip' ./metadata/vm-metadata.json)
            FIREWALL_RULE=$(jq -r '.vm.firewall_rule' ./metadata/vm-metadata.json)
            CREATED_AT=$(jq -r '.deployment.created_at' ./metadata/vm-metadata.json)
            METADATA_FOUND="true"
            
            echo "üñ•Ô∏è  VM Name: $VM_NAME"
            echo "üìç Zone: $VM_ZONE"
            echo "üåç Region: $VM_REGION"
            echo "üåê IP: $VM_IP"
            echo "üî• Firewall Rule: $FIREWALL_RULE"
            echo "üìÖ Created: $CREATED_AT"
          elif [[ "${{ github.event.inputs.force_deletion }}" == "true" ]]; then
            echo "‚ö†Ô∏è  VM metadata not found, but force deletion is enabled"
            echo "   Will attempt to find and delete VM by deployment ID..."
            METADATA_FOUND="false"
          else
            echo "‚ùå VM metadata not found for deployment ID: ${{ env.DEPLOYMENT_ID }}"
            echo "   Options:"
            echo "   1. Check if the deployment ID is correct"
            echo "   2. Enable 'force_deletion' to attempt deletion without metadata"
            echo "   3. Manually delete the VM from Google Cloud Console"
            exit 1
          fi
          
          echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
          echo "vm_zone=$VM_ZONE" >> $GITHUB_OUTPUT
          echo "vm_region=$VM_REGION" >> $GITHUB_OUTPUT
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
          echo "firewall_rule=$FIREWALL_RULE" >> $GITHUB_OUTPUT
          echo "metadata_found=$METADATA_FOUND" >> $GITHUB_OUTPUT
      
      - name: Find VM by Labels (if metadata not found)
        if: steps.vm-info.outputs.metadata_found == 'false' && github.event.inputs.force_deletion == 'true'
        id: find-vm
        run: |
          echo "üîç Searching for VM with deployment ID: ${{ env.DEPLOYMENT_ID }}"
          
          # Search for VMs with the deployment-id label
          VM_INFO=$(gcloud compute instances list \
            --filter="labels.deployment-id=${{ env.DEPLOYMENT_ID }}" \
            --format="csv(name,zone,status)" --limit=1 | tail -n +2)
          
          if [[ -n "$VM_INFO" && "$VM_INFO" != "" ]]; then
            VM_NAME=$(echo "$VM_INFO" | cut -d, -f1)
            VM_ZONE_FULL=$(echo "$VM_INFO" | cut -d, -f2)
            VM_ZONE=$(basename "$VM_ZONE_FULL")
            VM_STATUS=$(echo "$VM_INFO" | cut -d, -f3)
            
            echo "‚úÖ Found VM: $VM_NAME in zone $VM_ZONE (status: $VM_STATUS)"
            
            # Get additional info
            VM_IP=$(gcloud compute instances describe "$VM_NAME" --zone="$VM_ZONE" \
              --format="get(networkInterfaces[0].accessConfigs[0].natIP)" || echo "unknown")
            
            # Update outputs
            echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
            echo "vm_zone=$VM_ZONE" >> $GITHUB_OUTPUT
            echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
            echo "found_vm=true" >> $GITHUB_OUTPUT
            
            # Look for associated firewall rule
            FIREWALL_RULE="allow-test-services-${{ env.DEPLOYMENT_ID }}"
            echo "firewall_rule=$FIREWALL_RULE" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No VM found with deployment ID: ${{ env.DEPLOYMENT_ID }}"
            echo "found_vm=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Stop Running Services
        if: steps.vm-info.outputs.metadata_found == 'true' || (steps.find-vm.outputs.found_vm == 'true' && github.event.inputs.force_deletion == 'true')
        continue-on-error: true
        run: |
          VM_NAME="${{ steps.vm-info.outputs.vm_name }}"
          VM_ZONE="${{ steps.vm-info.outputs.vm_zone }}"
          
          echo "üõë Stopping services on VM before deletion..."
          
          gcloud compute ssh "debian@$VM_NAME" --zone="$VM_ZONE" \
            --command="
              cd /opt/test-services || exit 0
              if [ -f docker-compose.yml ]; then
                echo 'Stopping Docker services...'
                sudo docker-compose down --timeout 30 2>/dev/null || echo 'Services stopped'
                echo 'Cleaning up Docker resources...'
                sudo docker system prune -f || echo 'Cleanup completed'
              fi
              echo 'Services cleanup completed'
            " --ssh-flag="-o ConnectTimeout=10" || echo "‚ö†Ô∏è  Could not connect to VM to stop services"
      
      - name: Delete VM Instance
        if: steps.vm-info.outputs.metadata_found == 'true' || (steps.find-vm.outputs.found_vm == 'true' && github.event.inputs.force_deletion == 'true')
        run: |
          VM_NAME="${{ steps.vm-info.outputs.vm_name }}"
          VM_ZONE="${{ steps.vm-info.outputs.vm_zone }}"
          
          if [[ -z "$VM_NAME" || -z "$VM_ZONE" ]]; then
            echo "‚ùå VM name or zone not available"
            exit 1
          fi
          
          echo "üóëÔ∏è  Deleting VM: $VM_NAME in zone $VM_ZONE"
          
          gcloud compute instances delete "$VM_NAME" \
            --zone="$VM_ZONE" \
            --quiet || {
              echo "‚ùå Failed to delete VM"
              exit 1
            }
          
          echo "‚úÖ VM deleted successfully"
      
      - name: Delete Firewall Rule
        continue-on-error: true
        run: |
          FIREWALL_RULE="${{ steps.vm-info.outputs.firewall_rule }}"
          
          if [[ -n "$FIREWALL_RULE" && "$FIREWALL_RULE" != "null" && "$FIREWALL_RULE" != "" ]]; then
            echo "üî• Deleting firewall rule: $FIREWALL_RULE"
            
            gcloud compute firewall-rules delete "$FIREWALL_RULE" --quiet || {
              echo "‚ö†Ô∏è  Could not delete firewall rule: $FIREWALL_RULE"
              echo "   You may need to delete it manually from the Google Cloud Console"
            }
          else
            echo "üîç Attempting to find and delete firewall rule for deployment ${{ env.DEPLOYMENT_ID }}"
            FIREWALL_RULE="allow-test-services-${{ env.DEPLOYMENT_ID }}"
            
            if gcloud compute firewall-rules describe "$FIREWALL_RULE" >/dev/null 2>&1; then
              echo "üî• Found and deleting firewall rule: $FIREWALL_RULE"
              gcloud compute firewall-rules delete "$FIREWALL_RULE" --quiet || echo "‚ö†Ô∏è  Could not delete firewall rule"
            else
              echo "‚ÑπÔ∏è  No firewall rule found to delete"
            fi
          fi
      
      - name: Clean Up Remaining Disks
        continue-on-error: true
        run: |
          echo "üîç Checking for remaining disks from deployment ${{ env.DEPLOYMENT_ID }}..."
          
          # Find disks with the deployment label
          REMAINING_DISKS=$(gcloud compute disks list \
            --filter="labels.deployment-id=${{ env.DEPLOYMENT_ID }}" \
            --format="value(name,zone)" || echo "")
          
          if [[ -n "$REMAINING_DISKS" ]]; then
            echo "üíæ Found remaining disks to delete:"
            echo "$REMAINING_DISKS" | while IFS=' ' read -r disk_name zone_path; do
              if [[ -n "$disk_name" && -n "$zone_path" ]]; then
                zone=$(basename "$zone_path")
                echo "   Deleting disk: $disk_name in zone $zone"
                gcloud compute disks delete "$disk_name" --zone="$zone" --quiet || echo "‚ö†Ô∏è  Failed to delete $disk_name"
              fi
            done
          else
            echo "‚úÖ No remaining disks found"
          fi
      
      - name: Verify Deletion
        run: |
          VM_NAME="${{ steps.vm-info.outputs.vm_name }}"
          VM_ZONE="${{ steps.vm-info.outputs.vm_zone }}"
          
          if [[ -n "$VM_NAME" && -n "$VM_ZONE" ]]; then
            echo "üîç Verifying VM deletion..."
            
            if gcloud compute instances describe "$VM_NAME" --zone="$VM_ZONE" >/dev/null 2>&1; then
              echo "‚ùå VM still exists after deletion attempt"
              exit 1
            else
              echo "‚úÖ VM deletion verified"
            fi
          fi
          
          # Check for any remaining resources
          echo "üîç Checking for any remaining resources with deployment ID ${{ env.DEPLOYMENT_ID }}..."
          
          REMAINING_VMS=$(gcloud compute instances list \
            --filter="labels.deployment-id=${{ env.DEPLOYMENT_ID }}" \
            --format="value(name)" || echo "")
            
          if [[ -n "$REMAINING_VMS" ]]; then
            echo "‚ö†Ô∏è  WARNING: Found remaining VMs with deployment ID ${{ env.DEPLOYMENT_ID }}:"
            echo "$REMAINING_VMS"
          else
            echo "‚úÖ No remaining VMs found"
          fi
      
      - name: Generate Deletion Report
        run: |
          VM_NAME="${{ steps.vm-info.outputs.vm_name }}"
          VM_ZONE="${{ steps.vm-info.outputs.vm_zone }}"
          VM_REGION="${{ steps.vm-info.outputs.vm_region }}"
          VM_IP="${{ steps.vm-info.outputs.vm_ip }}"
          
          cat > deletion-report.json << EOF
          {
            "deletion_completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployment_id": "${{ env.DEPLOYMENT_ID }}",
            "vm_info": {
              "name": "$VM_NAME",
              "zone": "$VM_ZONE", 
              "region": "$VM_REGION",
              "ip": "$VM_IP"
            },
            "metadata_found": ${{ steps.vm-info.outputs.metadata_found }},
            "deletion_method": "${{ github.event.inputs.force_deletion == 'true' && 'forced' || 'normal' }}",
            "deleted_by": "${{ github.actor }}",
            "deletion_workflow": {
              "run_id": "${{ github.run_id }}",
              "run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            },
            "resources_cleaned": {
              "vm_instance": true,
              "firewall_rules": true,
              "persistent_disks": true
            },
            "status": "completed"
          }
          EOF
          
          echo ""
          echo "üéâ VM DELETION COMPLETED!"
          echo "========================="
          echo "üñ•Ô∏è  VM Name: $VM_NAME"
          echo "üåç Region: $VM_REGION"
          echo "üìç Zone: $VM_ZONE"
          echo "üåê IP: $VM_IP"
          echo "üë§ Deleted by: ${{ github.actor }}"
          echo "üìÖ Deleted at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "üÜî Deployment ID: ${{ env.DEPLOYMENT_ID }}"
          echo "‚úÖ Status: Successfully deleted"
          echo "üßπ Cleaned up: VM, Firewall rules, Disks"
          echo "========================="
      
      - name: Upload Deletion Report
        uses: actions/upload-artifact@v4
        with:
          name: deletion-report-${{ env.DEPLOYMENT_ID }}
          path: deletion-report.json
          retention-days: 90
      
      - name: Clean Up Metadata Artifact
        continue-on-error: true
        run: |
          echo "üßπ VM deletion completed - metadata artifact will expire per retention policy"
          echo "   Deletion report uploaded as: deletion-report-${{ env.DEPLOYMENT_ID }}"