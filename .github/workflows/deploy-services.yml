name: Deploy Services on VM

on:
  workflow_dispatch:
    inputs:
      deployment_id:
        type: string
        description: 'Deployment ID from VM creation'
        required: true
      force_redeploy:
        type: boolean
        description: 'Force redeploy (stop existing services first)'
        default: false
      test_language:
        type: choice
        description: 'Test Language'
        options:
          - 'english'
          - 'arabic'
        default: 'english'
      test_channel:
        type: choice
        description: 'Test Channel'
        options:
          - 'whatsapp'
          - 'web'
        default: 'whatsapp'
      test_runner_branch:
        type: string
        description: 'Test Runner Branch'
        default: 'dev'
      api_server_branch:
        type: string
        description: 'API Server Branch'  
        default: 'dev'
      router_service_url:
        type: string
        description: 'Router Service URL'
        required: true
      webbot_ws_url:
        type: string
        description: 'WebBot WebSocket URL'
        required: true
      mongodb_uri:
        type: string
        description: 'MongoDB Connection URI'
        required: true
      whatsapp_config:
        type: string
        description: 'WhatsApp Config JSON (business_account_id,phone_number_id,from_phone,display_phone,sender_name)'
        required: true

jobs:
  deploy-services:
    runs-on: ubuntu-latest
    environment: main
    
    permissions:
      contents: read
      id-token: write
      actions: read
    
    env:
      PROJECT_ID: "vsa-ai-prod"
      DEPLOYMENT_ID: ${{ github.event.inputs.deployment_id }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_VSA_PROD }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      - name: Parse WhatsApp Config
        id: parse-whatsapp
        run: |
          WHATSAPP_JSON='${{ github.event.inputs.whatsapp_config }}'
          echo "business_account_id=$(echo $WHATSAPP_JSON | jq -r '.business_account_id')" >> $GITHUB_OUTPUT
          echo "phone_number_id=$(echo $WHATSAPP_JSON | jq -r '.phone_number_id')" >> $GITHUB_OUTPUT
          echo "from_phone=$(echo $WHATSAPP_JSON | jq -r '.from_phone')" >> $GITHUB_OUTPUT
          echo "display_phone=$(echo $WHATSAPP_JSON | jq -r '.display_phone')" >> $GITHUB_OUTPUT
          echo "sender_name=$(echo $WHATSAPP_JSON | jq -r '.sender_name // "Test Harness"')" >> $GITHUB_OUTPUT
      
      - name: Download VM Metadata
        uses: actions/download-artifact@v4
        with:
          name: vm-metadata-${{ env.DEPLOYMENT_ID }}
          path: ./metadata
      
      - name: Extract VM Info
        id: vm-info
        run: |
          VM_NAME=$(jq -r '.vm.name' ./metadata/vm-metadata.json)
          VM_ZONE=$(jq -r '.deployment.zone' ./metadata/vm-metadata.json)
          VM_IP=$(jq -r '.vm.external_ip' ./metadata/vm-metadata.json)
          echo "vm_name=$VM_NAME" >> $GITHUB_OUTPUT
          echo "vm_zone=$VM_ZONE" >> $GITHUB_OUTPUT
          echo "vm_ip=$VM_IP" >> $GITHUB_OUTPUT
      
      - name: Verify VM Running
        run: |
          VM_STATUS=$(gcloud compute instances describe "${{ steps.vm-info.outputs.vm_name }}" --zone="${{ steps.vm-info.outputs.vm_zone }}" --format="get(status)")
          if [[ "$VM_STATUS" != "RUNNING" ]]; then exit 1; fi
      
      - name: Stop Existing Services
        if: github.event.inputs.force_redeploy == 'true'
        run: |
          gcloud compute ssh "debian@${{ steps.vm-info.outputs.vm_name }}" --zone="${{ steps.vm-info.outputs.vm_zone }}" --command="
            cd /opt/test-services || exit 0
            if [ -f docker-compose.yml ]; then
              sudo docker-compose down --timeout 30 2>/dev/null || true
              sudo docker system prune -f || true
            fi
          "
      
      - name: Checkout Test Runner
        uses: actions/checkout@v4
        with:
          repository: 'metadome-ai/metadome-vsa-test-runner'
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          path: './test-runner'
          ref: ${{ github.event.inputs.test_runner_branch }}
      
      - name: Checkout API Server
        uses: actions/checkout@v4
        with:
          repository: 'metadome-ai/metadome-vsa-test-api-server'
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          path: './api-server'
          ref: ${{ github.event.inputs.api_server_branch }}
      
      - name: Generate Configuration
        run: |
          VM_IP="${{ steps.vm-info.outputs.vm_ip }}"
          VM_NAME="${{ steps.vm-info.outputs.vm_name }}"
          mkdir -p ./configs
          
          # Test Runner .env
          cat > ./configs/test-runner.env << EOF
          API_BASE_URL=http://${VM_IP}:8080
          DEFAULT_CHANNEL=${{ github.event.inputs.test_channel }}
          WEBHOOK_HOST=0.0.0.0
          WEBHOOK_PORT=5000
          WEBHOOK_ENDPOINT=/receive-response
          RESPONSE_TIMEOUT=30
          WEBHOOK_CHECK_INTERVAL=0.5
          MONGODB_URI=${{ github.event.inputs.mongodb_uri }}
          REGION=${{ steps.vm-info.outputs.vm_zone }}
          VM_ID=$VM_NAME
          DEPLOYMENT_ID=${{ env.DEPLOYMENT_ID }}
          TEST_LANGUAGE=${{ github.event.inputs.test_language }}
          TEST_SCENARIOS_DIR=test_scenarios/${{ github.event.inputs.test_language }}
          EOF
          
          # API Server .env
          cat > ./configs/api-server.env << EOF
          PORT=8080
          ENV=testing
          LOG_LEVEL=info
          ROUTER_SERVICE_URL=${{ github.event.inputs.router_service_url }}
          WEBBOT_WS_URL=${{ github.event.inputs.webbot_ws_url }}
          CALLBACK_URL=http://${VM_IP}:5000/api/v1/webhook/test-results
          DEFAULT_WHATSAPP_BUSINESS_ACCOUNT_ID=${{ steps.parse-whatsapp.outputs.business_account_id }}
          DEFAULT_WHATSAPP_PHONE_NUMBER_ID=${{ steps.parse-whatsapp.outputs.phone_number_id }}
          DEFAULT_WHATSAPP_FROM_PHONE=${{ steps.parse-whatsapp.outputs.from_phone }}
          DEFAULT_WHATSAPP_DISPLAY_PHONE=${{ steps.parse-whatsapp.outputs.display_phone }}
          DEFAULT_WHATSAPP_SENDER_NAME=${{ steps.parse-whatsapp.outputs.sender_name }}
          MONGODB_URI=${{ github.event.inputs.mongodb_uri }}
          REGION=${{ steps.vm-info.outputs.vm_zone }}
          VM_ID=$VM_NAME
          DEPLOYMENT_ID=${{ env.DEPLOYMENT_ID }}
          EOF
          
          # Docker Compose
          cat > ./configs/docker-compose.yml << EOF
          version: '3.8'
          services:
            test-runner:
              build: 
                context: ./test-runner
                dockerfile: Dockerfile
              container_name: test-runner-${{ env.DEPLOYMENT_ID }}
              ports:
                - "5000:5000"
              env_file:
                - ./test-runner.env
              volumes:
                - ./test-runner:/app:ro
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                
            api-server:
              build: 
                context: ./api-server
                dockerfile: Dockerfile
              container_name: api-server-${{ env.DEPLOYMENT_ID }}
              ports:
                - "8080:8080"
              env_file:
                - ./api-server.env
              volumes:
                - ./api-server:/app:ro
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOF
          
          # Deploy Script
          cat > ./configs/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          cd /opt/test-services
          
          # Stop existing services
          docker-compose down --timeout 30 2>/dev/null || true
          
          # Build and start
          docker-compose build --no-cache
          docker-compose up -d
          
          # Wait and check
          sleep 45
          curl -f http://localhost:8080/health && curl -f http://localhost:5000/health
          EOF
          
          chmod +x ./configs/deploy.sh
      
      - name: Upload to VM
        run: |
          tar -czf configs.tar.gz -C ./configs .
          gcloud compute scp configs.tar.gz "debian@${{ steps.vm-info.outputs.vm_name }}:/tmp/" --zone="${{ steps.vm-info.outputs.vm_zone }}"
          gcloud compute scp --recurse ./test-runner "debian@${{ steps.vm-info.outputs.vm_name }}:/tmp/" --zone="${{ steps.vm-info.outputs.vm_zone }}"
          gcloud compute scp --recurse ./api-server "debian@${{ steps.vm-info.outputs.vm_name }}:/tmp/" --zone="${{ steps.vm-info.outputs.vm_zone }}"
      
      - name: Deploy Services
        run: |
          gcloud compute ssh "debian@${{ steps.vm-info.outputs.vm_name }}" --zone="${{ steps.vm-info.outputs.vm_zone }}" --command="
            cd /opt/test-services
            sudo rm -rf test-runner api-server *.env docker-compose.yml deploy.sh 2>/dev/null || true
            tar -xzf /tmp/configs.tar.gz -C .
            sudo mv /tmp/test-runner /tmp/api-server .
            sudo chown -R debian:debian .
            ./deploy.sh
          "
      
      - name: Update Metadata
        run: |
          jq --arg deployed_at \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\" \
             --arg language \"${{ github.event.inputs.test_language }}\" \
             --arg channel \"${{ github.event.inputs.test_channel }}\" \
             '.services.deployed = true | .services.deployed_at = $deployed_at | .services.language = $language | .services.channel = $channel' \
             ./metadata/vm-metadata.json > vm-metadata-updated.json
      
      - name: Upload Updated Metadata
        uses: actions/upload-artifact@v4
        with:
          name: vm-metadata-${{ env.DEPLOYMENT_ID }}
          path: vm-metadata-updated.json
          retention-days: 30
      
      - name: Display Summary
        run: |
          VM_IP="${{ steps.vm-info.outputs.vm_ip }}"
          echo "Services Deployed Successfully"
          echo "Test Runner: http://$VM_IP:5000"
          echo "API Server: http://$VM_IP:8080"
          echo "Language: ${{ github.event.inputs.test_language }}"
          echo "Channel: ${{ github.event.inputs.test_channel }}"
          echo "Test API: POST http://$VM_IP:5000/api/v1/tests"